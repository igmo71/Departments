@page "/пользовательсхемапредприятияs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Departments.Domain
@using Departments.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Departments.Data.AppDbContext> DbFactory

<PageTitle>Пользователи</PageTitle>

<h1>Пользователи</h1>

@* <p>
    <a href="пользовательсхемапредприятияs/create">Create New</a>
</p> *@
@* Items="itemsQuery" *@
<QuickGrid Class="table" ItemsProvider="itemsProvider">
    <PropertyColumn Title="Пользователь" Sortable="true" Property="пользовательсхемапредприятия =>
        пользовательсхемапредприятия.Пользователь == null ? string.Empty : пользовательсхемапредприятия.Пользователь.Description" />
    <PropertyColumn Title="СхемаПредприятия" Sortable="true" Property="пользовательсхемапредприятия =>
        пользовательсхемапредприятия.СхемаПредприятия == null ? string.Empty : пользовательсхемапредприятия.СхемаПредприятия.Description" />

    @* <TemplateColumn Context="пользовательсхемапредприятия">
        <a href="@($"пользовательсхемапредприятияs/edit?пользователь_key={пользовательсхемапредприятия.Пользователь_Key}")">Edit</a> |
        <a href="@($"пользовательсхемапредприятияs/details?пользователь_key={пользовательсхемапредприятия.Пользователь_Key}")">Details</a> |
        <a href="@($"пользовательсхемапредприятияs/delete?пользователь_key={пользовательсхемапредприятия.Пользователь_Key}")">Delete</a>
    </TemplateColumn> *@
</QuickGrid>

@code {
    private AppDbContext context = default!;
    //private IQueryable<ПользовательСхемаПредприятия> itemsQuery = default!;
    GridItemsProvider<ПользовательСхемаПредприятия>? itemsProvider;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        // itemsQuery = context.ПользовательСхемаПредприятия
        //     .AsNoTracking()
        //     .Include(e => e.СхемаПредприятия)
        //     .Include(e => e.Пользователь);


        itemsProvider = async request =>
        {
            var query = context.ПользовательСхемаПредприятия.AsNoTracking();

            //request.ApplySorting(query);
            if (request.SortByColumn != null)
            {
                var sortExpression = ((PropertyColumn<ПользовательСхемаПредприятия, string>)request.SortByColumn)?.Property;
                if (sortExpression != null)
                {
                    if (request.SortByAscending)
                        query = query.OrderBy(sortExpression);
                    else
                        query = query.OrderByDescending(sortExpression);
                }
            }

            var result = await query
         .Include(e => e.СхемаПредприятия)
         .Include(e => e.Пользователь).ToListAsync();

            var response = GridItemsProviderResult.From(items: result, totalItemCount: result.Count);

            return response;
        };
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}

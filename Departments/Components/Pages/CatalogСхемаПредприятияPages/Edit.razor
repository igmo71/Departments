@page "/catalogсхемапредприятияs/edit"
@using Microsoft.EntityFrameworkCore
@using Departments.Domain
@inject IDbContextFactory<Departments.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Изменить</PageTitle>

<h2>Изменить</h2>

<h4>Отдел в Схеме Предприятия</h4>
<hr />
@if (CatalogСхемаПредприятия is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="CatalogСхемаПредприятия" OnValidSubmit="UpdateCatalogСхемаПредприятия" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />

                <input type="hidden" name="CatalogСхемаПредприятия.Ref_Key" value="@CatalogСхемаПредприятия.Ref_Key" />
                
                <div class="mb-3">
                    <label for="parent_key" class="form-label">Родительский Отдел:</label>
                   @*  <InputText id="parent_key" @bind-Value="CatalogСхемаПредприятия.Parent_Key" class="form-control" />
                    <ValidationMessage For="() => CatalogСхемаПредприятия.Parent_Key" class="text-danger" /> *@
                        <input type="text" value="@parent?.Description" class="form-control" disabled />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Наименование:</label>
                    <InputText id="description" @bind-Value="CatalogСхемаПредприятия.Description" class="form-control" />
                    <ValidationMessage For="() => CatalogСхемаПредприятия.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="deletionmark" class="form-label">Пометка Удаления:</label>
                    <InputCheckbox id="deletionmark" @bind-Value="CatalogСхемаПредприятия.DeletionMark" class="form-check-input" />
                    <ValidationMessage For="() => CatalogСхемаПредприятия.DeletionMark" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Сохранить</button> |
                    <a href="/catalogсхемапредприятияs/tree">Назад к Списку</a>
                </div>

            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private string? Ref_Key { get; set; }

    [SupplyParameterFromForm]
    private CatalogСхемаПредприятия? CatalogСхемаПредприятия { get; set; }

    private CatalogСхемаПредприятия? parent;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        CatalogСхемаПредприятия ??= await context.CatalogСхемаПредприятия.FirstOrDefaultAsync(m => m.Ref_Key == Ref_Key);

        if (CatalogСхемаПредприятия is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            parent = await context.CatalogСхемаПредприятия
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.Ref_Key == CatalogСхемаПредприятия.Parent_Key);
        }
    }

    private async Task UpdateCatalogСхемаПредприятия()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(CatalogСхемаПредприятия!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CatalogСхемаПредприятияExists(CatalogСхемаПредприятия!.Ref_Key))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/catalogсхемапредприятияs/tree");
    }

    private bool CatalogСхемаПредприятияExists(string ref_key)
    {
        using var context = DbFactory.CreateDbContext();
        return context.CatalogСхемаПредприятия.Any(e => e.Ref_Key == ref_key);
    }
}

@page "/catalogсхемапредприятияs/details"
@using Microsoft.EntityFrameworkCore
@using Departments.Domain
@inject IDbContextFactory<Departments.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>CatalogСхемаПредприятия</h2>
    <hr />
    @if (catalogсхемапредприятия is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DeletionMark</dt>
            <dd class="col-sm-10">@catalogсхемапредприятия.DeletionMark</dd>
            <dt class="col-sm-2">Parent_Key</dt>
            <dd class="col-sm-10">@catalogсхемапредприятия.Parent_Key</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@catalogсхемапредприятия.Description</dd>
        </dl>
        <div>
            <a href="@($"/catalogсхемапредприятияs/edit?ref_key={catalogсхемапредприятия.Ref_Key}")">Edit</a> |
            <a href="@($"/catalogсхемапредприятияs")">Back to List</a>
        </div>
    }
</div>

@code {
    private CatalogСхемаПредприятия? catalogсхемапредприятия;

    [SupplyParameterFromQuery]
    private string Ref_Key { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        catalogсхемапредприятия = await context.CatalogСхемаПредприятия.FirstOrDefaultAsync(m => m.Ref_Key == Ref_Key);

        if (catalogсхемапредприятия is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

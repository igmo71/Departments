@page "/catalogсхемапредприятияs/tree"

@using Departments.Components.ComponentTreeView
@using Departments.Components.Icons
@using Departments.Data
@using Departments.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore


@implements IAsyncDisposable

@inject IDbContextFactory<Departments.Data.AppDbContext> DbFactory
@inject ProtectedSessionStorage ProtectedSessionStore

<h2>Схема Предприятия</h2>
<hr />
<Microsoft.FluentUI.AspNetCore.Components.FluentDragContainer TItem="string" OnDropEnd="@(async e => await Droped(e))">
    <div class="row">
        <div class="col">
            <div class="overflow-auto" style="max-height: 800px;">
                <TreeView TreeItems="treeItems">
                    <TreeItemTemplate Context="treeItem">
                        <Microsoft.FluentUI.AspNetCore.Components.FluentDropZone Id="@treeItem.Id" Draggable="true" Droppable="true">
                            <div class="d-flex flex-row @(treeItem.Id == selectedTreeItemId ? "bg-body-secondary" : string.Empty)">
                                <div class="btn" @onclick="() => ExpandItem(treeItem)">
                                    <TreeIcons TreeItem="treeItem" />
                                </div>
                                <div class="btn text-start" @onclick="() => SelectItem(treeItem)">@treeItem.Value</div>
                            </div>
                        </Microsoft.FluentUI.AspNetCore.Components.FluentDropZone>
                    </TreeItemTemplate>
                </TreeView>
            </div>
        </div>
        <div class="col">
            <div class="overflow-auto" style="max-height: 800px;">
                @if (selectedTreeItemId != null)
                {
                    <p>
                        <h4>@selectedTreeItem?.Value</h4>
                    </p>
                    <p>
                        <a href="@($"/пользовательсхемапредприятияs/create?СхемаПредприятия_Key={selectedTreeItemId}")">
                            Добавить Пользователя
                        </a>
                    </p>
                    <QuickGrid @ref="qGrid" Class="table" Items="queryПользователиСхемаПредприятия">
                        <TemplateColumn Context="item">
                            <Microsoft.FluentUI.AspNetCore.Components.FluentDropZone Id="@item.Пользователь_Key" Draggable="true" Droppable="true">
                                <a class="btn"><GripVerticalIcon /> @item.Пользователь?.Description </a>
                            </Microsoft.FluentUI.AspNetCore.Components.FluentDropZone>
                        </TemplateColumn>
                        @* <PropertyColumn Property="item => item.Пользователь == null ? string.Empty : item.Пользователь.Description" Title="" /> *@
                        <TemplateColumn Context="item">
                            @if (item.СхемаПредприятия != null && item.Пользователь != null)
                            {
                                <a href="@($"/пользовательсхемапредприятияs/edit?СхемаПредприятия_Key={item.СхемаПредприятия_Key}&Пользователь_Key={item.Пользователь.Ref_Key}")">
                                    Переместить
                                </a>
                                <span> | </span>
                                <a href="@($"/пользовательсхемапредприятияs/delete?СхемаПредприятия_Key={item.СхемаПредприятия_Key}&Пользователь_Key={item.Пользователь.Ref_Key}")">
                                    Удалить
                                </a>
                            }
                        </TemplateColumn>
                    </QuickGrid>
                }
            </div>
        </div>
    </div>
</Microsoft.FluentUI.AspNetCore.Components.FluentDragContainer>

@code {
    private AppDbContext context = default!;
    private IQueryable<ПользовательСхемаПредприятия>? queryПользователиСхемаПредприятия;
    private QuickGrid<ПользовательСхемаПредприятия>? qGrid;

    List<CatalogСхемаПредприятия>? originalItems;
    private List<TreeItem>? treeItems;
    private TreeItem? selectedTreeItem;
    private string? selectedTreeItemId;
    private List<string>? expandedTreeItemsId;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        await GetTreeItems();
    }

    private async Task GetTreeItems()
    {
        originalItems = await context.CatalogСхемаПредприятия
        .AsNoTracking()
        .Where(e => e.DeletionMark == false)
        .OrderBy(e => e.Description)
        .ToListAsync();

        var list = From(originalItems);

        var restoredStateList = await ResoreTreeState(list);

        treeItems = TreeBuilder.Build(restoredStateList);
    }

    private List<TreeItem> From(List<CatalogСхемаПредприятия> originalItems)
    {
        var list = originalItems.Select(e => new TreeItem
            {
                Id = e.Ref_Key,
                Value = e.Description,
                IsFolder = true,
                ParentId = e.Parent_Key
            }).ToList();

        return list;
    }

    private async Task<List<TreeItem>> ResoreTreeState(List<TreeItem> treeItems)
    {
        var expandedTreeItemsResult = await ProtectedSessionStore.GetAsync<List<string>?>(nameof(expandedTreeItemsId));

        if (expandedTreeItemsResult.Success)
        {
            expandedTreeItemsId = expandedTreeItemsResult.Value;

            if (expandedTreeItemsId != null)
            {
                var expandedTreeItems = treeItems.Where(i => expandedTreeItemsId.Contains(i.Id));
                foreach (var item in expandedTreeItems)
                    item.IsExpanded = true;
            }

        }

        var selectedTreeItemIdResult = await ProtectedSessionStore.GetAsync<string?>(nameof(selectedTreeItemId));

        if (selectedTreeItemIdResult.Success)
        {
            selectedTreeItemId = selectedTreeItemIdResult.Value;
            selectedTreeItem = treeItems.FirstOrDefault(i => i.Id == selectedTreeItemId);
            BuildQueryПользователиСхемаПредприятия();
        }

        return treeItems;
    }

    private async Task ExpandItem(TreeItem treeItem)
    {
        treeItem.IsExpanded = !treeItem.IsExpanded;

        if (treeItem.IsExpanded)
        {
            expandedTreeItemsId ??= [];
            expandedTreeItemsId.Add(treeItem.Id);
        }
        else if (expandedTreeItemsId != null)
        {
            expandedTreeItemsId.Remove(treeItem.Id);
        }

        await ProtectedSessionStore.SetAsync(nameof(expandedTreeItemsId), expandedTreeItemsId);
    }

    private async Task SelectItem(TreeItem treeItem)
    {
        selectedTreeItem = treeItem;
        selectedTreeItemId = treeItem.Id;

        BuildQueryПользователиСхемаПредприятия();

        await ProtectedSessionStore.SetAsync(nameof(selectedTreeItemId), selectedTreeItemId);
    }

    private void BuildQueryПользователиСхемаПредприятия()
    {
        queryПользователиСхемаПредприятия = context.ПользовательСхемаПредприятия
            .AsNoTracking()
            .Where(e => e.СхемаПредприятия_Key == selectedTreeItemId)
            .Include(e => e.Пользователь)
            .Include(e => e.СхемаПредприятия);
    }

    private async Task Droped(Microsoft.FluentUI.AspNetCore.Components.FluentDragEventArgs<string> eventArgs)
    {
        context.ПользовательСхемаПредприятия
            .Where(e => e.Пользователь_Key == eventArgs.Source.Id)
            .ExecuteUpdate(setters => setters.
                SetProperty(p => p.СхемаПредприятия_Key, eventArgs.Target.Id));

        expandedTreeItemsId ??= [];
        expandedTreeItemsId.Add(eventArgs.Target.Id);
        await ProtectedSessionStore.SetAsync(nameof(expandedTreeItemsId), expandedTreeItemsId);

        selectedTreeItemId = eventArgs.Target.Id;
        await ProtectedSessionStore.SetAsync(nameof(selectedTreeItemId), selectedTreeItemId);

        await GetTreeItems();

        await qGrid.RefreshDataAsync();

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }
}

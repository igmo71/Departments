@page "/catalogсхемапредприятияs/tree"

@using Departments.Components.ComponentTreeView
@using Departments.Components.Icons
@using Departments.Data
@using Departments.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics

@implements IAsyncDisposable

@inject IDbContextFactory<Departments.Data.AppDbContext> DbFactory
@inject ProtectedSessionStorage ProtectedSessionStore

<h2>Схема Предприятия</h2>
<hr />

<Microsoft.FluentUI.AspNetCore.Components.FluentDragContainer TItem="string"
                                                              OnDragStart="eventArgs => DragStart(eventArgs)"
                                                              OnDropEnd="@(async eventArgs => await DropEnd(eventArgs))">
    <div class="row">
        <div class="col">
            <div class="mb-2">
                <button class="btn btn-outline-primary rounded-pill" @onclick="ExpandAll">
                    <Folder2OpenIcon /> Открыть Все
                </button>
                <button class="btn btn-outline-primary rounded-pill" @onclick="CloseAll">
                    <FolderIcon /> Закрыть Все
                </button>
            </div>
            <div class="overflow-auto" style="max-height: 800px;">
                <TreeView TreeItems="treeItems">
                    <TreeItemTemplate Context="treeItem">

                        <Microsoft.FluentUI.AspNetCore.Components.FluentDropZone Id="@treeItem.Id" Draggable="false" Droppable="true">

                            <div class="d-flex flex-row @(treeItem.Id == selectedTreeItemId ? "bg-body-secondary" : string.Empty)">

                                <div class="btn-group dropend">
                                    <div class="btn" @onclick="() => ExpandItem(treeItem)">
                                        <TreeIcons TreeItem="treeItem" />
                                    </div>
                                    <div class="btn text-start" @onclick="() => SelectItem(treeItem)">@treeItem.Value</div>
                                    <div class="btn dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                        <span class="visually-hidden">Toggle Dropdown</span>
                                    </div>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="/catalogсхемапредприятияs/create?parent_key=@treeItem.Id"><PlusLgIcon /> Добавить подотдел</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="/catalogсхемапредприятияs/edit?ref_key=@treeItem.Id"><PencilIcon /> Изменить этот</a></li>
                                        @* <li><a class="dropdown-item" href="/catalogсхемапредприятияs/delete?ref_key=@treeItem.Id"><Trash3Icon /> Удалить этот</a></li> *@
                                    </ul>
                                </div>

                            </div>

                        </Microsoft.FluentUI.AspNetCore.Components.FluentDropZone>

                    </TreeItemTemplate>
                </TreeView>
            </div>
        </div>
        <div class="col">
            <div class="mb-2">
                <button class="btn btn-outline-primary rounded-pill" @onclick="GetUnusedПользователи">
                    <PeopleIcon /> Показать не назначенных Пользователей
                </button>
            </div>
            <div class="overflow-auto" style="max-height: 800px;">
                @if (selectedTreeItemId != null)
                {
                    <div>
                        <h4>@selectedTreeItem?.Value</h4>
                    </div>
                    <div>
                        <a href="@($"/пользовательсхемапредприятияs/create?СхемаПредприятия_Key={selectedTreeItemId}")">
                            <PersonPlusIcon /> Добавить Пользователя
                        </a>
                    </div>
                    <QuickGrid @ref="qGrid" Class="table" Items="queryПользователиСхемаПредприятия">
                        <TemplateColumn Context="item">

                            <Microsoft.FluentUI.AspNetCore.Components.FluentDropZone Id="@item.Пользователь_Key" Draggable="true" Droppable="false">

                                <a class="btn"><GripVerticalIcon /> @item.Пользователь?.Description </a>

                            </Microsoft.FluentUI.AspNetCore.Components.FluentDropZone>

                        </TemplateColumn>
                        @* <PropertyColumn Property="item => item.Пользователь == null ? string.Empty : item.Пользователь.Description" Title="" /> *@
                        <TemplateColumn Context="item">
                            @if (item.СхемаПредприятия != null && item.Пользователь != null)
                            {
                                <a href="@($"/пользовательсхемапредприятияs/delete?СхемаПредприятия_Key={item.СхемаПредприятия_Key}&Пользователь_Key={item.Пользователь.Ref_Key}")">
                                    <Trash3Icon /> Удалить
                                </a>
                            }
                        </TemplateColumn>
                    </QuickGrid>
                }
                else if (unusedПользователи != null)
                {
                    <div>
                        <h4>Не назначенные Пользователи</h4>
                    </div>
                    <table class="table">
                        <tbody>
                            @foreach (var item in unusedПользователи)
                            {
                                <tr>
                                    <td>
                                        <Microsoft.FluentUI.AspNetCore.Components.FluentDropZone Id="@item.Ref_Key" Draggable="true" Droppable="false">

                                            <a class="btn"><GripVerticalIcon /> @item.Description </a>

                                        </Microsoft.FluentUI.AspNetCore.Components.FluentDropZone>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                }

            </div>
        </div>
    </div>
</Microsoft.FluentUI.AspNetCore.Components.FluentDragContainer>

@code {
    private AppDbContext context = default!;
    private IQueryable<ПользовательСхемаПредприятия>? queryПользователиСхемаПредприятия;
    private QuickGrid<ПользовательСхемаПредприятия>? qGrid;

    List<CatalogСхемаПредприятия>? originalItems;
    private List<TreeItem>? treeItemsPlainList;
    private List<TreeItem>? treeItems;
    private TreeItem? selectedTreeItem;
    private string? selectedTreeItemId;
    private List<string>? expandedTreeItemsId;
    private List<CatalogПользователи>? unusedПользователи;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        await GetTreeItems();
    }

    private async Task GetTreeItems(bool? isExpandAll = null)
    {
        originalItems = await context.CatalogСхемаПредприятия
        .AsNoTracking()
        .Where(e => e.DeletionMark == false)
        .OrderBy(e => e.Description)
        .ToListAsync();

        treeItemsPlainList = From(originalItems);

        if (isExpandAll is null)
        {
            treeItemsPlainList = await ResoreTreeState(treeItemsPlainList);
        }
        else if (isExpandAll == true)
        {
            foreach (var item in treeItemsPlainList)
                item.IsExpanded = true;
        }
        else if (isExpandAll == false)
        {
            foreach (var item in treeItemsPlainList)
                item.IsExpanded = false;
        }

        treeItems = TreeBuilder.Build(treeItemsPlainList);
    }

    private List<TreeItem> From(List<CatalogСхемаПредприятия> originalItems)
    {
        var list = originalItems.Select(e => new TreeItem
            {
                Id = e.Ref_Key,
                Value = e.Description,
                IsFolder = true,
                ParentId = e.Parent_Key
            }).ToList();

        return list;
    }

    private async Task<List<TreeItem>> ResoreTreeState(List<TreeItem> treeItems)
    {
        var expandedTreeItemsResult = await ProtectedSessionStore.GetAsync<List<string>?>(nameof(expandedTreeItemsId));

        if (expandedTreeItemsResult.Success)
        {
            expandedTreeItemsId = expandedTreeItemsResult.Value;

            if (expandedTreeItemsId != null)
            {
                var expandedTreeItems = treeItems.Where(i => expandedTreeItemsId.Contains(i.Id));
                foreach (var item in expandedTreeItems)
                    item.IsExpanded = true;
            }

        }

        var selectedTreeItemIdResult = await ProtectedSessionStore.GetAsync<string?>(nameof(selectedTreeItemId));

        if (selectedTreeItemIdResult.Success)
        {
            selectedTreeItemId = selectedTreeItemIdResult.Value;
            selectedTreeItem = treeItems.FirstOrDefault(i => i.Id == selectedTreeItemId);
            BuildQueryПользователиСхемаПредприятия();
        }

        return treeItems;
    }

    private async Task ExpandItem(TreeItem treeItem)
    {
        treeItem.IsExpanded = !treeItem.IsExpanded;

        if (treeItem.IsExpanded)
        {
            expandedTreeItemsId ??= [];
            expandedTreeItemsId.Add(treeItem.Id);
        }
        else if (expandedTreeItemsId != null)
        {
            expandedTreeItemsId.Remove(treeItem.Id);
        }

        if (expandedTreeItemsId is not null)
            await ProtectedSessionStore.SetAsync(nameof(expandedTreeItemsId), expandedTreeItemsId);
    }

    private async Task SelectItem(TreeItem treeItem)
    {
        selectedTreeItem = treeItem;
        selectedTreeItemId = treeItem.Id;

        BuildQueryПользователиСхемаПредприятия();

        await ProtectedSessionStore.SetAsync(nameof(selectedTreeItemId), selectedTreeItemId);
    }

    private void BuildQueryПользователиСхемаПредприятия()
    {
        queryПользователиСхемаПредприятия = context.ПользовательСхемаПредприятия
            .AsNoTracking()
            .Where(e => e.СхемаПредприятия_Key == selectedTreeItemId)
            .Include(e => e.Пользователь)
            .Include(e => e.СхемаПредприятия);
    }

    private void GetUnusedПользователи()
    {
        using var context = DbFactory.CreateDbContext();

        var keys = context.ПользовательСхемаПредприятия
            .AsNoTracking()
            .Select(e => e.Пользователь_Key)
            .ToList();

        unusedПользователи = context.CatalogПользователи
            .AsNoTracking()
            .AsEnumerable()
            .Where(u => !keys.Contains(u.Ref_Key))
            .OrderBy(e => e.Description)
            .ToList();

        selectedTreeItemId = null;

    }

    private void DragStart(Microsoft.FluentUI.AspNetCore.Components.FluentDragEventArgs<string> eventArgs)
    {
        Debug.WriteLine($"DragStart: {eventArgs.Source.Id}");
    }

    private async Task DropEnd(Microsoft.FluentUI.AspNetCore.Components.FluentDragEventArgs<string> eventArgs)
    {
        if (selectedTreeItemId == null)
        {
            var newItem = new ПользовательСхемаПредприятия()
                {
                    Пользователь_Key = eventArgs.Source.Id,
                    СхемаПредприятия_Key = eventArgs.Target.Id
                };
            context.ПользовательСхемаПредприятия.Add(newItem);
            context.SaveChanges();
            GetUnusedПользователи();
        }
        else
        {
            context.ПользовательСхемаПредприятия
                .Where(e => e.Пользователь_Key == eventArgs.Source.Id)
                .ExecuteUpdate(setters => setters.
                    SetProperty(p => p.СхемаПредприятия_Key, eventArgs.Target.Id));
        }

        await GetTreeItems();

        if (qGrid != null)
            await qGrid.RefreshDataAsync();
    }

    private async Task ExpandAll(MouseEventArgs e)
    {
        await GetTreeItems(isExpandAll: true);
    }

    private async Task CloseAll(MouseEventArgs e)
    {
        await GetTreeItems(isExpandAll: false);

        await ProtectedSessionStore.DeleteAsync(nameof(expandedTreeItemsId));
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }

    // private void DragStart(DragEventArgs ev, string id)
    // {
    //     ev.DataTransfer.DropEffect = "move";
    //     Debug.WriteLine($"DragStart: {id}");
    // }

    // private void DragOver(DragEventArgs ev, string id)
    // {
    //     Debug.WriteLine($"DragOver: {id}");
    // }

    // private void Drop(DragEventArgs ev, string id)
    // {
    //     Debug.WriteLine($"Drop: {id}");
    // }
}
